# -*- coding: utf-8 -*-
"""Micro-Grid_Simulation_Myanmar_Load_and_PV_data_With_MPC_Control.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dCx-fnoPi0VEbQWpfivAy9WAiVn6I1v_
"""

#Intallation instructions
#!pip install -U pymgrid

import numpy as np
import pandas as pd

np.random.seed(0)

from pymgrid import Microgrid
from pymgrid.modules import (
    BatteryModule,
    LoadModule,
    RenewableModule,
    GensetModule,
    GridModule)
from pymgrid.algos import ModelPredictiveControl

import pandas as pd

import plotly.express as px

"""*We* can then define some components of our microgrid. We will define two battery with a slower charging rate and lower efficiency but a capacity of 1000 kWh."""

large_battery = BatteryModule(min_capacity=10,
                              max_capacity=1000,
                              max_charge=10,
                              max_discharge=10,
                              efficiency=0.7,
                              init_soc=0.2)

load_df = pd.read_csv("/content/Shan_21.4148_98.1206_142.csv")
load_df_hourly =  load_df.iloc[::60]

load_pv_sim = pd.read_csv("/content/shan_myanmar_pv_21.5122_98.0098_uncorrected.csv")
load_pv_sim['electricity']
pv_sim_array_inp = np.array(load_pv_sim['electricity'])

pv_sim_array = np.hstack((pv_sim_array_inp,pv_sim_array_inp,pv_sim_array_inp,pv_sim_array_inp))
np.shape(pv_sim_array)
pv_ts = pv_sim_array

load_df_hourly

load_df.head()

load_ts_myanmar = np.array(load_df_hourly['kW'])

load = LoadModule(time_series=load_ts_myanmar)
pv = RenewableModule(time_series=pv_ts)

"""We will define an external electrical grid to fill any energy gaps.

The grid time series must contain three or four columns. The first three denote import price, export price, and carbon dioxide production per kWh.
"""

test_size = np.shape(load_ts_myanmar)[0]
grid_ts = [0.2, 0.1, 0.5] * np.ones((test_size, 3))
grid = GridModule(max_import=100,
                  max_export=100,
                  time_series=grid_ts)

"""*We* can then pass these to the ``Microgrid`` constructor to define a microgrid. Here, we give our renewable module the name "pv"."""

modules = [
    large_battery,
    ('pv', pv),
    load,
    grid
    ]

microgrid = Microgrid(modules)

mpc = ModelPredictiveControl(microgrid)

"""We can then simply define a control for these modules. Before doing so, we will reset our microgrid and then check its current state."""

microgrid.reset()
microgrid.state_series.to_frame()

mpc_result = mpc.run()

"""### Analyzing Results

After passing a control to the microgrid, we can view the results by viewing the microgrid's -- or any of the modules -- logs.

The microgrid's log has one row for each action taken. There are values for both the actions -- e.g. the amount of load met -- as well as the state: for example, the current load.
"""

output= mpc_result

load_out_df = output['load'][0]
load_out_df.to_csv('load_out_df', index=False)
del load_out_df['reward']

pv_out_df = output['pv'][0]
del pv_out_df['reward']
pv_out_df = pv_out_df.rename(columns={"curtailment": "pv_curtailment", "renewable_used": "pv_renewable_used","renewable_current": "pv_renewable_current"})
pv_out_df

balancing_out_df = output['balancing'][0]
del balancing_out_df['reward']

battery_0_out_df = output['battery'][0]
del battery_0_out_df['reward']
del battery_0_out_df['soc']
battery_0_out_df = battery_0_out_df.rename(columns={"discharge_amount": "battery_0_discharge_amount", "charge_amount": "battery_0_charge_amount","renewable_current": "battery_0_renewable_current"})

balance_out_df = output['balance'][0]
del balance_out_df['reward']

external_grid_out_df = output['grid'][0]
del external_grid_out_df['reward']
del external_grid_out_df['grid_export']
del external_grid_out_df['import_price_current']
del external_grid_out_df['export_price_current']
del external_grid_out_df['co2_per_kwh_current']
del external_grid_out_df['grid_status_current']


result_df = pd.concat([load_out_df,pv_out_df,battery_0_out_df,balancing_out_df,balance_out_df,external_grid_out_df], axis=1)
result_df

result_df.to_csv('Grid_simulation_results_Shan.csv', index=False)

# Plot the output
cols = [
    ("load", 0, "load_current"),
    ("load", 0, "load_met"),
    ("pv", 0, "renewable_used"),
    ("pv", 0, "curtailment"),
    ("pv", 0, "renewable_current"),
    ("battery", 0, "current_charge"),
    ("battery", 0, "discharge_amount"),
    ("battery", 0, "charge_amount"),
    #("battery", 1, "current_charge"),
    #("battery", 1, "discharge_amount"),
    #("battery", 1, "charge_amount"),
    ("grid", 0, "grid_import"),
    ("grid", 0, "grid_export"),
    ("grid", 0, "grid_status_current"),
    ("balancing", 0, "overgeneration"),
    ("balancing", 0, "loss_load"),
]

output.columns

flat = output[cols]
flat.columns = ["_".join(map(str, col)).strip() for col in flat.columns.values]
flat["load_0_load_current"] = -flat["load_0_load_current"]
cols = flat.columns
fig = px.line(flat, y=cols, x=list(range(len(flat))))
fig.show()

